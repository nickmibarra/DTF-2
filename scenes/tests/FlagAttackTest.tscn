[gd_scene load_steps=4 format=3 uid="uid://dfth6m4lhptkr"]

[ext_resource type="Script" path="res://scripts/Grid.gd" id="1"]
[ext_resource type="PackedScene" path="res://scenes/Flag.tscn" id="3"]

[sub_resource type="GDScript" id="1"]
script/source = "extends Node2D

@onready var grid = $Grid
@onready var flag = $Flag
@onready var test_results = $UI/TestResults

# Test configurations
const TEST_CASES = {
	\"front\": Vector2(1920, 540),  # Direct front approach
	\"back\": Vector2(2240, 540),   # From behind flag
	\"top\": Vector2(1920, 340),    # From above
	\"bottom\": Vector2(1920, 740), # From below
	\"diagonal\": Vector2(2240, 740) # Diagonal approach
}

const TEST_TIMEOUT = 5.0  # 5 seconds timeout per test

var current_test = \"\"
var tests_completed = []
var enemy_instance = null
var test_timer = 0.0

func _ready():
	# Ensure grid is initialized and in group
	grid.add_to_group(\"grid\")
	
	# Initialize UI
	setup_ui()
	
	# Wait a frame for grid to fully initialize
	await get_tree().process_frame
	
	print(\"\\n=== Starting Flag Attack Tests ===\")
	# Start with first test
	start_next_test()

func setup_ui():
	# Add test control buttons
	var button = Button.new()
	button.text = \"Run Next Test\"
	button.pressed.connect(start_next_test)
	$UI/Controls.add_child(button)
	
	var reset = Button.new()
	reset.text = \"Reset Tests\"
	reset.pressed.connect(reset_tests)
	$UI/Controls.add_child(reset)

func start_next_test():
	# Clean up previous test
	if enemy_instance:
		enemy_instance.queue_free()
		# Wait a frame to ensure cleanup
		await get_tree().process_frame
	
	# Reset test timer
	test_timer = 0.0
	
	# Find next untested position
	for test_name in TEST_CASES.keys():
		if not test_name in tests_completed:
			current_test = test_name
			spawn_test_enemy(TEST_CASES[test_name])
			var msg = \"\\nStarting test: \" + current_test
			test_results.text += msg
			print(msg)
			return
	
	var msg = \"\\nAll tests completed!\"
	test_results.text += msg
	print(msg)

func spawn_test_enemy(pos: Vector2):
	enemy_instance = preload(\"res://scenes/Enemy.tscn\").instantiate()
	enemy_instance.position = pos
	add_child(enemy_instance)
	print(\"Spawned enemy at: \", pos)
	
	# Connect to enemy signals
	enemy_instance.died.connect(_on_enemy_died)

func _on_enemy_died(_gold):
	var msg = \"\\nTest failed: \" + current_test + \" (Enemy died)\"
	test_results.text += msg
	print(msg)
	start_next_test()

func _process(delta):
	if enemy_instance and is_instance_valid(enemy_instance):
		test_timer += delta
		
		# Log enemy state every second
		if int(test_timer) != int(test_timer - delta):  # Once per second
			var state_text = \"Moving\" if enemy_instance.current_state == enemy_instance.AI_STATE.MOVING else \"Attacking\"
			var dist_to_flag = enemy_instance.position.distance_to(flag.position)
			var msg = \"\\n[\" + current_test + \"] State: \" + state_text + \", Distance to flag: \" + str(int(dist_to_flag))
			
			if not enemy_instance.current_path.is_empty():
				msg += \", Path length: \" + str(enemy_instance.current_path.size())
				
			# Add position info
			msg += \"\\n   Position: \" + str(enemy_instance.position)
			if not enemy_instance.current_path.is_empty():
				msg += \"\\n   Next waypoint: \" + str(grid.grid_to_world(enemy_instance.current_path[0]))
			
			test_results.text += msg
			print(msg)
		
		# Check if enemy is attacking flag
		if enemy_instance.current_state == enemy_instance.AI_STATE.ATTACKING and enemy_instance.current_target == flag:
			var msg = \"\\nTest passed: \" + current_test
			test_results.text += msg
			print(msg)
			tests_completed.append(current_test)
			start_next_test()
		
		# Check for timeout
		if test_timer >= TEST_TIMEOUT:
			var msg = \"\\nTest failed: \" + current_test + \" (Timeout)\"
			test_results.text += msg
			print(msg)
			start_next_test()

func reset_tests():
	tests_completed.clear()
	test_results.text = \"Test Results:\"
	print(\"\\n=== Resetting Flag Attack Tests ===\")
	if enemy_instance:
		enemy_instance.queue_free()
	start_next_test()
"

[node name="FlagAttackTest" type="Node2D"]
script = SubResource("1")

[node name="Grid" type="Node2D" parent="." groups=["grid"]]
script = ExtResource("1")

[node name="Flag" parent="." instance=ExtResource("3")]
position = Vector2(1920, 540)

[node name="UI" type="CanvasLayer" parent="."]

[node name="Controls" type="VBoxContainer" parent="UI"]
offset_right = 200.0
offset_bottom = 100.0

[node name="TestResults" type="RichTextLabel" parent="UI"]
offset_top = 100.0
offset_right = 400.0
offset_bottom = 600.0
text = "Test Results:"
